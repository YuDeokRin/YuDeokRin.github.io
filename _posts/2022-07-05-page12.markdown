---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
# lng_pair: id_autogeneratedsamplecontent_1
title: The Java8(함수형 인터페이스와 람다)

# post specific
# if not specified, .name will be used from _data/owner.yml
#author: "Dante"
# multiple category is not supported
category: auto generated
# multiple tag entries are possible`
tags: [Java, Java 8]
# thumbnail image for post
img: ":java8.jpg"
# disable comments on this page
comments_disable: true

# publish date
date: 2022-07-05 21:10:00 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2022-07-05 21:10:00 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---
{%- comment -%} Please delete below and place your page content here {%- endcomment -%}

{%- include util/auto-content-generator.liquid -%}

<!-- outline-start -->
# 함수형 인터페이스와 람다

## 자바 8에서 추가된 것

**Interface 안에서 static method를 정의할 수 있다. (자바 8)**

```java
public interface Test{

	void doIt(); // 추상 메소드 1

	//public을 생략할 수 있음
	static void printName() {
		System.out.println("Dante");
	}

}
```


Interface 안에 정의할 수 있는 method의 형태 다양해졌다 (자바 8)

```java
public interface Test{

	void doIt(); // 추상 메소드 1


	default void printID() {
		System.out.println("39348");
	}

}
```

## 함수형 인터페이스 (Functional Interface)

- 추상 메소드를 딱 하나만 가지고 있는 인터페이스

```java
public interface Test{

	abstract void doIt(); // 추상 메소드 1

	//abstract void doIt2(); // 추상 메소드 2 넣으면 안됨!
}
```

- SAM(Single Abstract Method) 인터페이스

- @FuncationInterface 애노테이션을 가지고 있는 인터페이스

```java
@FuncationalInterface
public interface Test{

	void doIt();

}
```

[FunctionalInterface (Java Platform SE 8 )](https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html)

## 람다 표현식(Lambda Expressions)

- 함수형 인터페이스의 인스턴스를 만드는 방법으로 쓰일 수 있다.
- 코드를 줄일 수 있다.
- 메소드 매개변수, 리턴 타입, 변수로 만들어 사용할 수도 있다.

## 자바에서 함수형 프로그래밍

- 함수를 First class object로 사용할 수 있다.
- 순수 함수 (Pure function)
  - 사이드 이팩트가 없다. (함수 밖에 있는 값을 변경하지 않는다)
  - 상태가 없다.(함 밖에 있는 값을 사용하지 않는다.

```java
public class Main{
	public static void main(String[] args){
		Test test = (number) -> return number + 10;


		System.out.println(test.doIt(1)); // 함수 밖에 있는 값을 변경하지 않는다
		System.out.println(test.doIt(1)); // 함수 밖에 있는 값을 변경하지 않는다
		System.out.println(test.doIt(1)); // 함수 밖에 있는 값을 변경하지 않는다

		System.out.println(test.doIt(2)); // 다른 값 나온다? 그럼 함수형 프로그래밍이라고 보기 어렵다.
		System.out.println(test.doIt(2));

	}
}

```

- 고차 함수(Higher-ORder Funcation)
  - 함수가 함수를 매개변수로 받을 수 있고 함수를 리턴할 수도 있다.
- 불변성

### 자바 8 이전에 함수형 인터페이스를 구현할 때  사용했던 익명클래스

예)

```java
@FuncationalInterface
public interface Test{

	void doIt();

}

public class MainClass{

	public static void main(String[] args){
		Test test = new Test() {
			@Override
			public void doIt(){
				System.out.println("Hello");
			}
		};
	}
}
```

- 자바 8 이후 사용하는 람다로 고쳤을 경우(함수형 인터페이스를 구현할 경우 람다로 가능 )

예)

```java
@FuncationalInterface
public interface Test{

	void doIt();

}

public class MainClass{

	public static void main(String[] args){
		Test test = new Test() -> System.out.println("Hello");
	}
}
```

- 출력이 두 줄일 경우

```java
public class MainClass{
	public static void main(String[] args){
		Test test = new Test() -> {
				System.out.println("Hello");
				System.out.println("Lambda");
	}
}
```

- 함수를 호출할 경우

```java
public class MainClass{
	public static void main(String[] args){
		Test test = new Test() -> {
				System.out.println("Hello");
				test.doIt();
	}
}
```

***참고 : 백기선강의 - The Java8***
<!-- outline-end -->
