---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
# lng_pair: id_autogeneratedsamplecontent_1
title: 스트림 활용(매핑편)

# post specific
# if not specified, .name will be used from _data/owner.yml
#author: "Dante"
# multiple category is not supported
category: auto generated
# multiple tag entries are possible`
tags: [Java, Design Pattern, Modern Java in action]
# thumbnail image for post
img: ":ModernJava.jpg"
# disable comments on this page
comments_disable: true

# publish date
date: 2022-09-16 14:15:00 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2022-09-16 14:15:00 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---
{%- comment -%} Please delete below and place your page content here {%- endcomment -%}

{%- include util/auto-content-generator.liquid -%}

<!-- outline-start -->
# Chapter5 (2)

# 스트림 활용 (매핑)

- 특정 객체에서 특정 데이터를 선택하는 작업은 데이터 처리 과정에서 자주 수행되는 연산이다.
- 스트림 API의 `map`과 `flatmap` 메서드는 특정 데이터를 선택하는 기능을 제공한다.

## 스트림의 각 요소에 함수 적용하기

`map()` 메서드는 스트림에서 제공되며, 인수로 제공된 함수는 각 요소에 적용되며 함수를 적용한 결과가 새로운 요소로 매핑된다.

새로운 요소로 매핑된다는 것은 기존의 값을 ‘고친다(modify)라는 개념이 아니라 ‘새로운 버전을 만든다'라는 개념레 가까우므로 ‘변환(Transforming)에 가까운 ‘메핑이라는 단어를 사용한다.

**➡️ 요리명 추출하기**

```java
List<String> dishNames = menu.stream()
  .map(Dish::getName)
  .collect(toList));
```

➡️ 결과

```java
[pork, beef, chicken, french fries, rice, season fruit, pizza, prawns, salmon]
```

➡️ 각 단어가 포함하는 글자 수의 리스트를 반환

```java
List<String> words = Arrays.asList("Modern", "Java", "In", "Action");
List<Integer> wordLengths = words.stream()
																 .map(String::length)
																 .collect(toList());
```

➡️ 결과

```java
[6, 4, 2, 6]
```

그렇다면 각 요리명의 길이를 알아보자.

➡️ 요리명 길이 구하기

```java
List<Integer> dishNameLengths = menu.stream()
																		.map(Dish::getName)
																	  .map(String::length)
																	  .collect(toList());
```

➡️ 결과

```java
[4, 4, 7, 12, 4, 12, 5, 6, 6]
```

## 스트림 평면화

고유 문자로 이루어진 리스트를 반환해보자.

예를 들어 [”Hello”, “World”] 리스트가 있다면 결과로 [”H”, “e”, “l”, “o”, “W”, “r”, “d”]를 포함하는 리스트가 반환되어야 한다.

리스트에 있는 각 단어를 문자로 매핑한 다음에 distinct로 중복된 문자를 필터링해서 쉽게 문제를 해결수 있을 것같다.

➡️map을 통해서  고유 문자로 이루어진 리스트 만들기 (실패)

```java
words.stream()
		 .map(word -> word.split(""))
		 .distinct()
		 .collect(toList());
```

하지만 … 결과는 다르게 나온다. 왜 그럴까 ?

map으로 전달한 람다는 각 단어의 String[ ] 을 반환한다는 점이 문제인거 같다.

그럼 map 메소드가 반환한 스트림의 형식은 Stream<String[]>이다.

내가 원하는 것은 문자열의 스트림을 표현할 Stream<String> 이다.

➡️map을 이용해서 단어 리스트에서 고유 문자를 찾는 데 실패한 사례

![Untitled](https://user-images.githubusercontent.com/56623911/190562257-b935ccaa-c10d-4d77-b3fc-4112e8735224.png)

이 실패한 것을 어떻게 해결할 수 있을까?  먼저 말하자면 flatMap을 이용하면된다.

### map과 Arrays.stream 활용

우선 배열 스트림 대신 문자열 스트림이 필요하다.

➡️문자열을 받아 스트릠을 만들어주는 메서드 → Arrays.stream()

```java
String[] arrayOfWords = {"Goodbye", "World"};
Stream<String> streamOfwords = Arrays.stream(arrayOfWords);
```

```java
words.stream()
		 .map(word -> word.split(""))  //<-- 각 단어를 개별 문자열 배열로 변환
		 .map(Arrays::stream) // <-- 각 배열을 별로의 스트림으로 생성
		 .distinct()
		 .collect(toList());
```

스트림 리스트(List<Stream<String>>)가 만들어지면서 문제가 해결되지 않았다.

문제 해결

- 각 단어를 개별 문자열로 이루어진 배열로 만든다.
- 각 배열을 별도의 스트림으로 만들어야 한다.

### flatMap 사용

```java
List<String> uniqueCharacters = words.stream()
																		 .map(word -> word.split("") //<-- 각 단어를 개별 문자로 포함하는 배열로 변환
																		 .flatMap(Arrays::stream) //<-- 생성된 스트림을 하나의 스트림으롤 평면화
																		 .distinct()
																		 .collect(toList());

```

➡️flatMap은 각 배열을 스트림이 아니라 스트림의 콘텐츠로 매핑한다. 즉, map(Arrays::stream)과 달리 flatMap은 하나의 평면화된 스트림을 반환한다.

![Untitled 1](https://user-images.githubusercontent.com/56623911/190562241-5fdd58ea-5393-489a-9d64-661f61d6931b.png)

- 요약

flatMap 메서드는 스트림의 각 값을 다른 스트림으로 만든 다음에 모든 스트림을 하나의 스트림으로 연결하는 기능을 수행한다.

### 퀴즈 매핑

1. 숫자 리스트가 주어졌을 때 각 숫자의 제곱근으로 이루어진 리스트를 반환하시오. 예를 들어 [1,2,3,4,5]가 주어지면 [1,4,9,16,25]를 반환해야 한다.

➡️정답

```java
List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
List<Integer> numbers = Arrays.stream()
														 .map(n -> n * n)
														 .collect(toList());
```

1.  두 개의 숫자 리스트가 있을 때 모든 숫자 쌍의 리스트를 반환하시오. 예를 들어 두 개의 리스트[1, 2, 3]과 [3, 4]가 주어지면 [(1, 3), (1, 4), (2, 3), (2, 4), (3, 3), (3, 4)]를 반환해야 한다.

➡️정답

```java
List<Integer> number1 = Arrays.asList(1, 2, 3);
List<Integer> number2 = Arrays.asList(3, 4);
List<int[]> pairs = number1.stream()
													 .flatMap(i -> number2.stream()
																						    .map(j -> new int[]{i, j})
													 )
													 .collect(toList());

```

1. 이전 예제에서 합이 3으로 나누어 떨어지는 쌍만 반환하려면 어떻게 해야 할까 ? 예를 들어 (2, 4), (3, 3)을 반환해야 한다.

➡️정답

```java
List<Integer> number1 = Arrays.asList(1, 2, 3);
  List<Integer> number2 = Arrays.asList(3, 4);
  List<int[]> pairs = number1.stream()
  .flatMap( i -> number2.stream()
  .filter(j -> (i + j) % 3 == 0)
  .map(j -> new int[]{i, j})
  )
  .collect(toList());
```

## 매핑을 회고하며..

진짜 SQL질의 같다는 생각이 너무 든다. 서브쿼리 짜는 거 같기도하고… 어렵다…학습하고 연습하여 익히자.. 신기하고 재밋네.. 알면 알수록.. 프로그래머스에서 문제들이 몇몇이 자바 8로 풀어진 문제들이 있는데 정말 간결하고 가독성이 좋다. 앞으로 나도 그렇게 풀 날만 기다리고 있다. 뭐 지금은 속도도 느리고 포기하지말고 끝까지하는 것이 오래가는것이다.  마지막 영화 짝패 그리고 함께자라기에서 인용한 글을 올리고 마치겠다.

> **강한놈이 오래가는게 아니라 오래 가는놈이 강한거더라.**                                - 영화 짝패 대사 **中**



<!-- outline-end -->
