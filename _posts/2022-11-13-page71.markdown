---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
# lng_pair: id_autogeneratedsamplecontent_1
title: String - in java

# post specific
# if not specified, .name will be used from _data/owner.yml
#author: "Dante"
# multiple category is not supported
category: auto generated
# multiple tag entries are possible`
tags: [Java]
# thumbnail image for post
img: ":java.jpg"
# disable comments on this page
comments_disable: true

# publish date
date: 2022-11-13 22:40:00 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2022-11-13 22:40:00 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---
{%- comment -%} Please delete below and place your page content here {%- endcomment -%}

{%- include util/auto-content-generator.liquid -%}

<!-- outline-start -->

# String

---

## String 클래스 선언 부분

```java
public final class String extneds Object
    implements Serializable, Compareable<String>, CharSequence
```

String의 클래스를 보면 `final` 로 선언된 클래스이다.

- `final` 가 붙은 클래스는 확장할 수 없다. (즉, 자식 클래스를 만들 수 없다)

```java
implements Serializable, Compareable<String>, CharSequence
```

- `Serialzable` : 이 인터페이스는 구현해야 하는 메소드가 하나도 없는 특별한 인터페이스이다. 해당 객체를 파일로 저장하거나 다른 서버에 전송 가능한 상태가 되게 해준다.
- `Compareable<String>` : 이 인터페이스는 `compareTo()` 라는 메소드 하나만 선언되어 있다. 이 메소드는 매개 변수로 넘어가는 객체와 현재 객체각 같은 지 비교하는 데 사용된다. `리턴 타입`은 `int`다. 같으면 `0`, 순서상 앞에 있으면 `-1`, 뒤에 있으면 `1`을 리턴한다.
- `CharSequence` : 이 인터페이스는 해당 클래스가 문자열을 다루기 위한 클래스라는 것을 명시적으로 나타내는 데 사용된다.

---

## String의 생성자

```java
String name = "Dante";
```

String을 선언할 때 보통 위처럼 선언한다.

하지만 생성자가 더 있다. 생성자를 알아보자.

| 생성자 | 설명 |
| --- | --- |
| String() | 비어있는 String 객체를 생성한다. 그런데 이렇게 생성하는 것은 전혀 의미가 없다. 다음과 같이 선언하는 것이 더 효율적이다.
String name = null; |
| String(byte[] bytes) | 현재 사용중인 플랫폼의 캐릭터 셋을 사용하여 제공된 byte 배열을 디코딩한 String 객체를 생성한다. |
| String(byte[] bytes, Charset charset) | 지정된 캐릭터 셋을 사용하여 제공된 byte배열을 디코딩한 String 객체를 생성한다.  |
| String(byte[] bytes, String charsetName) | 지정한 이름을 갖는 캐릭터 셋을 사용하여 지정한 byte 배열을 디코딩한 String 객체를 생성한다. |
| String(btyte[] bytes, int offset, int length) | 현재 사용중인 플랫폼의 기본 캐릭터 셋을 사용하여 지정한 byte 배열의 일부를 디코딩한 String 객체를 생성한다. |
| String(btyte[] bytes, int offset, int length, Charset charset) | 지정된 캐릭터 셋을 사용하여 byte 배열의 일부를 디코딩한 String 객체를 생성한다. |
| String(btyte[] bytes, int offset, int length, String charsetName)) | 지정한 이름을 갖는 개릭터 셋을 사용하여 byte 배열의 일부를 디코딩한 String 객체를 생성한다. |
| String(char[] vlaue) | char 배열의 내용들을 붙여 String 객체를 생성한다. |
| String(char[] value, int offset, int count) | char 배열의 일부 내용들을 붙여 String 객체를 생성한다. |
| String(int[] codePoints, int offset, int count) | 유니코드 코드 위치(Unicode code point)로 구성되어 있는 배열의 일부를 새로운 String 객체를 생성한다. |
| String(String original) | 매개 변수로 넘어온 String과 동일한 값을 갖는 String 객체를 생성한다. 다시 말해서. 복제본을 생성한다. |
| String(StringBuffer buffer) | 매개 변수로 넘어온 StringBuffer 클래스를 정의되어 있는 문자열의 값과 동일한 String 객체를 생성한다. |
| String(StringBuilder builder) | 매개 변수로 넘어온  Stringbuilder 클래스에 정의되어 있는 문자열의 값과 동일한 String 객체를 생성한다. |

위의 생성자 중 제일 많이 쓰이는 것은 아래의 것들이다.

- String(byte[] bytes)
- String(byte[] bytes, StringcharsetName)

위의 생성자가 많이 쓰이는 이유는 영어권 국가가 아닌 한글을 사용하는 국가권이기 때문이다.

---

## String 문자열을 byte로 변환하기

| 리턴 타입 | 메소드 이름 및 매개 변수 | 설명 |
| --- | --- | --- |
| byte[] | getByte() | 기본 캐릭터 셋의 바이트 배열을 생성한다. |
| byte[] | getByte(Charset charset | 지정한 캐릭터 셋 객체 타입으로 바이트 배열을 생성한다. |
| byte[] | getBytes(String charsetName) | 지정한 이름의 캐릭터 셋을 갖는 바이트 배열 생성한다. |



<!-- outline-end -->
