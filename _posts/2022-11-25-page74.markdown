---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
# lng_pair: id_autogeneratedsamplecontent_1
title: 테스트 주도 개발 7주차

# post specific
# if not specified, .name will be used from _data/owner.yml
#author: "Dante"
# multiple category is not supported
category: auto generated
# multiple tag entries are possible`
tags: [TDD]
# thumbnail image for post
img: ":testDrivenDevelopment.jpg"
# disable comments on this page
comments_disable: true

# publish date
date: 2022-11-25 23:40:00 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2022-11-25 23:40:00 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---
{%- comment -%} Please delete below and place your page content here {%- endcomment -%}

{%- include util/auto-content-generator.liquid -%}

<!-- outline-start -->

# 스터디 7주차(22.11.17 ~ 22.11.26)

## 진행 범위 : 26장 ~ 27장

---

## 26장. 빨간 막대 패턴

- 이번26장은 테스트를 언제 어디서 작성할 것인지, 테스트 작성을 언제 멈출지에 대한 것

### ➡️한 단계 테스트

- 목록에서 테스트를 고를 때 무엇을 기준으로 선택해야할까?
  - 구현할 수 있다는 확신이 드는 테스트를 고를 것.


- 예를 들어 아래와 같은 목록이 있다면 어떤 테스트를 우선순위로 할 것인가?

```
- 더하기

- 빼기

- 곱하기

- 나누기

- 비슷한 것 더하기

- 동치성(equals)

- Null과의 동치성(equals null)

- 널 환전

- 한 개의 통화를 환전하기

- 두 개의 통화를 환전하기

- 환시세
```

- 전체 계산 중 간단한 하나의 사례를 나타내는 테스트에서 시작했다면, 이 테스트를 통해 자라는 프로그램은 `하향식(top-down)`으로 작성된 것으로 보일 수 있다.

- 전체의 작은 한 조각을 나타내는 테스트에서 시작하여 조금씩 붙여나가는 식이었다면, 이 프로그램은 `상향식(bottom-up)`으로 작성된 것으로 보일 수 있다.

상향식, 하향식 방법은 TDD의 프로세스를 효과적으로 설명해 줄 수 없다.

1. 수직적 메타포는 프로그램이 시간에 따라 어떻게 변해 가는지에 대한 단순화된 시각일 뿐…
2. 메타포가 어떤 방향성을 가질 필요가 있다면(상향 혹은 하향보다는) `‘아는 것에서 모르는 것으로(known-to-unknown)’`라는 방향이 유용하다.

---

### ➡️시작 테스트

**어떤 테스트부터 시작하는 게 좋을까?**

- 첫 걸음으로 현실적인 테스트를 하나 작성한다면 많은 문제를 한번에 해결해야 하는 상황이 될 것이기 때문에 유의해야한다.
1. 이 오퍼레이션을 어디에 두어야 하나?
2. 적절한 입력 값은 무엇인가?
3. 이 입력들이 주어졌을 때 적절한 출력은 무엇인가?

- 상황 예시
  - XP 튜스 그룹에서 누군가가 다각형 축소기(polygon reducer)를 테스트 우선으로 어떻게 작설할지 질문을 했다고 가정해보자.  입력은 다각형 그물이고, 출력은 정확하게 똑같은 표면이면서 가능한 한 최소 개수의 다각형으로 구성된 다각형 그물이 된다.

- 위의 상황 가정에서 “테스트를 작동하도록 하는 데 박사 학위 논문을 읽어야 하는 경우, 이 문제를 어떻게 테스트 주도로 접근할 수 있을까?”

시작 테스트 패턴에 이 문제에 대한 답을 준다.

- 출력이 입력과 같은 경우가 있다. 어떤 형상(configuration)의 다각형들은 이미 정규화되어 있고 더 축소할 수 없다.
- 입력은 가능한 한 적어야 한다. 이를테면 다각형 하나 또는 아예 비어있는 다각형 목록일 수도 있다.

```java
Reducer r = new Reducer(new Polygon());
assertEquals(0, reducer.result().npoints);
```

첫 번째 테스트 돌아간다. 이제 목록에 있는 나머지 테스트를 처리할 차례다.

한 단계 테스트는 시작 테스트에도 적용된다. 뭔가를 가르쳐줄 수 있으면서도 빠르게 구현할 수 있는 테스트를 선택하자.

만약 어떤 애플리케이션을 n번째 구현하고 있다면, 오퍼레이션을 한두 개 필요로 하는 테스트를 하나 고르는게 좋다.

보통 시작 테스트는 그 이후의 테스트에 비해 좀 더 높은 차원의 테스트로, 애플리케이션 테스트와 비슷하다.

글쓴이가 많이 사용하는 테스트 주도로 개발하는 예 중 하나는 간단한 `소켓 기반 서버`다.

```java
StartServer
Socket = new Socket
Message = "hello";
Socket.write(message)
AssertEquals(message, socket.read)
```

---

### ➡️설명 테스트

**자동화된 테스트가 더 널리 쓰이게 하려면 어떻게 해야 할까?**

- 결론부터 말하면 테스트를 통해 설명을 요청하고 테스트를 통해 설명

단순한 시작법은 테스트를 이용하여 묻고, 테스트를 이용하여 설명하는 것이다.

---

### ➡️ 학습 테스트

- 외부에서 만든 소프트웨어에 대한 테스트를 작성해야할 때도 있을까?

패키지의 새로운 기능을 처음으로 사용해보기 전에 작성한다.

---

### ➡️ 회귀 테스트

- 시스템 장애가 보고될 때 장애로 인한 실패하는 테스트, 장애가 수정되었다고 확인할 수 있는 테스트를 작성한다.

- 회귀 테스트를 작성할 때는 이 테스트를 작성해야 한다는 사실을 어떻게 하면 애초에 알 수 있었을지 항상 생각해보자.

- 전체 애플리케이션 차원에서 테스트를 수행하는 것에서도 가치를 얻을 수 있다.

- 회귀 테스트는 작은 차원에서 테스트를 개선하는 방법이 된다.
  - 예) 큰 음수에 대한 결함보고서

- 시스템 장애를 손쉽게 격리시킬 수 없다면 리팩토링 해야한다. → 설계 미흡

---

## 27장. 테스팅 패턴

- 이번 장은 테스트 작성법에 대하여 더 상세한 테스트

### ➡️자식 테스트

규모가 큰 테스트 케이스를 어떻게 돌아가도록 할 수 있을까?

- 테스트 케이스의 깨지는 부분에 해당하는 작은 테스트 케이스를 작성하고 그 작은 테스트 케이스가 실행되도록 하라. 그 후 다시 큰 테스트 케이스를 추가하라.
- 신경쓰이는 테스트는 삭제하고 테스트한다. 혹은 삭제말고 제외만하고 테스트를 진행한다.

테스트가 너무 크면 자식처럼 부담을 나누라는 뜻

---

### ➡️모의 객체

**비용이 많이 들거나 복잡한 리소스에 의존하는 객체를 테스트하려면 어떻게 해야 할까?**

- 상수를 반환하게끔 만든 속임수 버전의 리소스를 만들면 된다. → `모의 객체(Mock Object)`

- 예) 데이터 베이스
  - 데이터베이스는 시작 시간이 오래 걸리고, 깨끗한 상태로 유지하기가 어렵다.
  - 만약 데이터베이스가 원격 서버에 있다면 이로 인해 테스트 성공 여부가 네트워크 상의 물리적 위치에 영향을 받게 된다.
  - 데이터베이스는 개발 중 많은 오류의 원인이 된다.

- 해법)
  - 데이터베이스를 사용하지 않는 것이다.
  - 대다수의 테스트는, 마치 데이터베이스인 것처럼 행동하지만 실제로는 메모리에만 존재하는 객체를 통해 작성될 수 있다.

```java
public void testOredrLookup(){
    Database db = new MockDatabase();
    db.expectQuery("select order_no from Order where cust_no is 123");
    db.returnResult(new String[] {"Order 2", "Order 3"});
    ...
}
```

`MockDatabase` 는 예상된 쿼리를 얻지 못하면 예외를 던질 것이다. 만약 쿼리가 올바르다면 MockDatabase는 상수 문자열에서 마치 `결과 집합(result set)` 처럼 보이는 뭔가를 생성하여 반환하다.

- 장점
  - 성능 & 견고함 - 실제 물리적 테스트 환경에 영향을 받지 않고 테스트를 수행할 수 있게 도와줌
  - 가독성 -


<!-- outline-end -->
