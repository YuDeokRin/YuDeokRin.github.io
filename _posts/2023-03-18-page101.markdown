---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
# lng_pair: id_autogeneratedsamplecontent_1
title: Thymeleaf 기본 문법 정리

# post specific
# if not specified, .name will be used from _data/owner.yml
#author: "Dante"
# multiple category is not supported
category: auto generated
# multiple tag entries are possible
tags: [Effective_Java, Java]
# thumbnail image for post
img: ":thymeleaf.jpg"
# disable comments on this page
comments_disable: true

# publish date
date: 2023-03-18 23:11:00 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2023-03-18 23:11:00 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---
{%- comment -%} Please delete below and place your page content here {%- endcomment -%}

{%- include util/auto-content-generator.liquid -%}

<!-- outline-start -->

# 타임리프 - 기본기능

## Thymeleaf 특징

- 서버 사이드 HTML 렌더링 (SSR)
- 네츄럴 템플릿(natural templates)
- 스프링 통합 지원

---

## ➡️타임리프 기본 기능

### ✅타임리프 사용 선언

```java
<html xmlns:th="http://www.thymeleaf.org">
```

### ✅기본 표현식

- 간단한 표현
  - 변수 표현식 : ${…}
  - 선택 변수 표현식 : *{…}
  - 메시지 표현식 : #{…}
  - 링크 URL 표현식: @{…}
  - 조각 표현식 : ~{…}

- 리터럴
  - 텍스트 : ‘one text’, ‘Another one!’, …
  - 숫자 : 0, 1, 3.2, 11.0, ….
  - 불린 : true, false
  - 널 : null
  - 리터럴 토큰 : one, sometext, main, …

- 문자 연산 :
  - 문자 합치기 : +
  - 리터럴 대체 : |Hello ${name}|

- 산술 연산 :
  - Binary operators : +, -, *, /, %
  - Minus sign (unary operator) : -

- 불린 연산
  - Binary operators : and, or
  - Boolean negation (unary operator) : !, not

- 비교와 동등
  - 비교 : >, <, ≥, ≤   (  gt, le ,ge, le)
  - 동등 연산  : ==, ≠ (eq, ne)

- 조건 연산
  - If-then : (if) ? (then)
  - if-then-else : (if) ? (then) : (else)
  - Default :  (value) ?: defaultvalue)

- 특별한 토큰 :
  - No-Operation : _

출처 - [Thymleaf 기본기능](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax)

---

## ➡️텍스트 - text, utext

타임리프는 기본적으로 HTML 태그의 속성에 기능을 정의해서 동작한다. HTML의 콘텐츠(Content)에 데이터를 출력할 때는 다음과 같이 `th:text` 를 사용한다.

`<span th:text="${data}">`

HTML 태그의 속성이 아니라 HTML 콘텐츠 영역안에서 직접 데이터를 출력하고 싶으면 다음과 같이 사용한다

`[[...]]`

컨텐츠 안에서 직접 출력하기  = `[[${data}]]`

---

## Escape

HTML문서는 `<` , `>` 같은 특수 문자를 기반으로 정의된다. 따라서 뷰 템플릿으로 HTML 화면을 생성할 때는 출력하는 데이터에 이러한 특수 문자가 있는 것을 주의해서 사용해야 한다.

<b> 태그를 사용해서 **Srping!** 이라는단어가 굵게 나오게 해보자.

```java
@GetMapping("text-basic")
public String textBasic(Model model) {
    model.addAttribute("data", "hello <b>Spring!</b>");
    return "basic/text-basic";
}
```

- 페이지 소스를 보면 아래와 같이 나온다.

```java
<li>th:text 사용 <span>hello &lt;b&gt;Spring!&lt;/b&gt;</span></li>
```

개발자가 의도한 것은 `<b>` 가 있으면 해당 부분을 강조하는 것이 목적이었다. <b> 태그 그대로 나온다.

소스 보기를 하면 `<` 부분이 `&lt;`로 변경된 것을 알 수 있다.

### ⚠️HTML 엔티티

웹 브라우저는 `<` 를 HTML 태그의 시작으로 인식한다. 따라서 `<` 를 태그의 시작이 아니라 문자로 표현할 수 있는 방법이 필요한데, 이것을 HTML 엔티티라 한다. 그리고 이렇게 HTML에서 사용하는 특수 문자를 HTML 엔티티로 변경하는 것을 이스케이프(escape)라 한다.

타임리프가 제공하는 `th:text`, `[[...]]` 는 기본적으로 이스케이프(escape)를 제공한다.

| 엔티티 문자 | 엔티티 이름 | 16진수 엔티티 숫자 | 설명 |
| --- | --- | --- | --- |
|   | &nbsp; | &#160; | 줄 바꿈 없는 공백 |
| < | &lt; | &#60; | 보다 작은 |
| > | &gt; | &#62; | 보다 큰 |
| & | &amp; | &#38; | AND 기호 |
| " | &quot; | &#34; | 큰따옴표 |
| ' | &apos; | &#39; | 작은따옴표 |

[Character entity references in HTML](https://www.w3.org/TR/html4/sgml/entities.html)

### ⚠️Unescape

이스케이프 기능을 사용하지 않으려면 어떻게 해야할까?

타임리프는 다음 두 기능을 제공한다.

- `th:text` → `th:utext`
- `[[...]]` → `[(...)]`

---

## ➡️SpringEL 다양한 표현식 사용

### 1️⃣Object

- `user.username` : user의 username을 프로퍼티 접근 → `user.getUsername()`
- `user[’username’]` : 위와 같음 → `user.getUsername()`
- `user.getUsername()` : user의 `getUsername()` 을 직접 호출

## 2️⃣ List

- `users[0].username` : List에서 첫 번째 회원을 찾고 username 프로퍼티 접근 → `list.get(0).getUsername()`
- `users[0][’username’]` :  위와 같음
- `users[0].getUsername()` : List에서 첫 번째 회원을 찾고 메서드 직접 호출

## 3️⃣Map

- `userMap['userA'].username` :  Map에서 userA를 찾고, username 프로퍼티 접근 → `map.get("userA").getUsername()`
- `userMap['userA']['username']` : 위와 같음
- `userMap['userA'].getUsername()` : Map에서 userA를 찾고 메서드 직접 호출

```html
<h1>SpringEL 표현식</h1>
<ul>
    <li>${user.username} = <span th:text="${user.username}"></span></li>
    <li>${user['username']} = <span th:text="${user['username']}"></span></li>
    <li>${user.getUsername()} = <span th:text="${user.getUsername()}"></span></li>

</ul>
<ul>list
    <li>${users[0].username = <span th:text="${users[0].username}"></span></li>
    <li>${users[0]['username']} = <span th:text="${users[0]['username']}"></span></li>
    <li>${users[0].getUsername()} = <span th:text="${users[0].getUsername()}"></span></li>
</ul>

<ul>Map
    <li>${userMap['userA'].username = <span th:text="${userMap['userA'].username}"></span></li>
    <li>${userMap['userA']['username']} = <span th:text="${userMap['userA']['username']}"></span></li>
    <li>${userMap['userA'].getUsername()} = <span th:text="${userMap['userA'].getUsername()}"></span></li>
</ul>
```

- 화면 출력

![Untitled](%E1%84%90%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%B7%E1%84%85%E1%85%B5%E1%84%91%E1%85%B3%20-%20%E1%84%80%E1%85%B5%E1%84%87%E1%85%A9%E1%86%AB%E1%84%80%E1%85%B5%E1%84%82%E1%85%B3%E1%86%BC%20d8a37ea6e93a42cc97b11acb19be30f7/Untitled.png)

### 지역변수 선언

`th:with` 를 사용하면 지역 변수를 선언해서 사용할 수 있다. 지역 변수는 선언한 태그 안에서만 사용할 수 있다.

```html
<h1>지역 변수 - (th:with)</h1>
<div th:with="first=${users[0]}">
    <p>처음 사람의 이름은 <span th:text="${first.username}"></span></p>
</div>
```

- 화면 출력

![Untitled](%E1%84%90%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%B7%E1%84%85%E1%85%B5%E1%84%91%E1%85%B3%20-%20%E1%84%80%E1%85%B5%E1%84%87%E1%85%A9%E1%86%AB%E1%84%80%E1%85%B5%E1%84%82%E1%85%B3%E1%86%BC%20d8a37ea6e93a42cc97b11acb19be30f7/Untitled%201.png)

---

## ➡️기본 객체들

타임 리프는 기본 객체들을 제공한다.

- `${#request}` : 스프링 부트 3.0부터 제공하지 않는다.
- `${#response}` : 스프링 부트 3.0부터 제공하지 않는다.
- `${session}` : 스프링 부트 3.0부터 제공하지 않는다.
- `${servletContext}` : 스프링 부트 3.0부터 제공하지 않는다.
- `${#locale}`

### ⚠️주의- 스프링 부트 3.0

스프링 부트 3.0부터는 `${#request}`, `${#response}` , `${session}`, `${servletContext}` 를 지원하지 않는다. 만약 사용하게 되면 다음과 같은 오류가 발생한다.

```
Caused by: java.lang.IllegalArgumentException: The
'request','session','servletContext' and 'response' expression utility objects
are no longer available by default for template expressions and their use is
not recommended. In cases where they are really needed, they should be manually
added as context variables.
```

스프링 부트 3.0이라면 직접 `model` 에 해당 객체를 추가해서 사용해야 한다.

스프링 부트 2.5.0으로 예제를 진행

`#request` 는 `HttpServletRequest` 객체가 그대로 제공되기 때문에 데이터를 조회하려면 `request.getParameter(”data”)` 처럼 불편하게 접근해야 한다.

이런 점을 해결하기 위해 편의 객체도 제공한다.

- HTTP 요청 파라미터 접근 : `param`
  - 예) `${param.paramData}`

- HTTP 세션 접근 : `session`
  - 예) `${session.sessionData}`

- 스프링 빈 접근 : `@`
  - 예) `${@helloBean.hello('Spring!')}`

### ✅식 기본 객체

```html
<h1>식 기본 객체 (Expression Basic Objects)</h1>
<ul>
    <li>request = <span th:text="${#request}"></span></li>
    <li>response = <span th:text="${#response}"></span></li>
    <li>session = <span th:text="${#session}"></span></li>
    <li>servletContext = <span th:text="${#servletContext}"></span></li>
    <li>locale = <span th:text="${#locale}"></span></li>
</ul>
```

- 화면 출력

![Untitled](%E1%84%90%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%B7%E1%84%85%E1%85%B5%E1%84%91%E1%85%B3%20-%20%E1%84%80%E1%85%B5%E1%84%87%E1%85%A9%E1%86%AB%E1%84%80%E1%85%B5%E1%84%82%E1%85%B3%E1%86%BC%20d8a37ea6e93a42cc97b11acb19be30f7/Untitled%202.png)

### ✅편의 객체

```html
<h1>편의 객체 </h1>
<ul>
    <li>Request Parameter = <span th:text="${param.paramData}"></span></li>
    <li>session = <span th:text="${session.sessionData}"></span></li>
    <li>spring bean = <span th:text="${@helloBean.hello('Spring!')}"></span></li>
</ul>
```

![Untitled](%E1%84%90%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%B7%E1%84%85%E1%85%B5%E1%84%91%E1%85%B3%20-%20%E1%84%80%E1%85%B5%E1%84%87%E1%85%A9%E1%86%AB%E1%84%80%E1%85%B5%E1%84%82%E1%85%B3%E1%86%BC%20d8a37ea6e93a42cc97b11acb19be30f7/Untitled%203.png)

---

## ➡️유틸리티 객체와 날짜

타임리프는 문자, 숫자, 날짜, URI 등을 편리하게 다루는 다양한 유틸리티 객체들을 제공한다.

### 타임리프 유틸리티 객체들

- `#message` : 메시지, 국제화 처리
- `#uris` : URI 이스케이프 지원
- `#dates` : `[java.util.Date](http://java.util.Date)` 서식 지원
- `#calendars` : `java.util.Calendar` 서식 지원
- `#temporals` : 자바8 날짜 서식 지원
- `#numbers` : 숫자 서식 지원
- `#strings` : 문자 관련 편의 기능
- `#objects` : 객체 관련 기능 제공
- `#bools` : boolean 관련 기능 제공
- `#arrays` 배열 관련 기능 제공
- `lists`, `#sets` , `#maps` : 켈력션 관련 기능 제공
- `#ids` : 아이디 처리 관련 기능 제공

> 참고 : [타임리프 유틸리티 객체](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#expression-utility-objects)

참고 : [유틸리티 객체 예시](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#appendix-b-expression-utility-objects)
>

### 🗓️자바8 날짜

타임리프에서 자바8 날짜인 `LocalDate`, `LocalDateTime` , `Instant` 를 사용하려면 추가 라이브러리가 필요하다. 스프링 부트 타임리프를 사용하면 해당 라이브러리가 자도응로 추가되고 통합된다.

### ✅타임리프 자바8 날짜 지원 라이브러리

- `thymeleaf-extras-java8time`

```html
<h1>LocalDateTime</h1>
<ul>
  <li>default = <span th:text="${localDateTime}"></span></li>
  <li>yyyy-MM-dd HH:mm:ss = <span th:text="${#temporals.format(localDateTime,'yyyy-MM-dd HH:mm:ss')}"></span></li>
</ul>
```

- 화면 출력

![Untitled](%E1%84%90%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%B7%E1%84%85%E1%85%B5%E1%84%91%E1%85%B3%20-%20%E1%84%80%E1%85%B5%E1%84%87%E1%85%A9%E1%86%AB%E1%84%80%E1%85%B5%E1%84%82%E1%85%B3%E1%86%BC%20d8a37ea6e93a42cc97b11acb19be30f7/Untitled%204.png)

### ✅자바8 날짜용 유틸리티 객체

`#temporals`

```html
<h1>LocalDateTime - Utils</h1>
<ul>
  <li>${#temporals.day(localDateTime)} = <span th:text="${#temporals.day(localDateTime)}"></span></li>

  <li>${#temporals.month(localDateTime)} = <span th:text="${#temporals.month(localDateTime)}"></span> </li>
  <li>${#temporals.monthName(localDateTime)} = <span th:text="${#temporals.monthName(localDateTime)}"></span></li>
  <li>${#temporals.monthNameShort(localDateTime)} = <span th:text="${#temporals.monthNameShort(localDateTime)}"></span></li>

  <li>${#temporals.year(localDateTime)} = <span th:text="${#temporals.year(localDateTime)}"></span></li>
  <li>${#temporals.dayOfWeek(localDateTime)} = <span th:text="${#temporals.dayOfWeek(localDateTime)}"></span></li>
  <li>${#temporals.dayOfWeekName(localDateTime)} = <span th:text="${#temporals.dayOfWeekName(localDateTime)}"></span> </li>
  <li>${#temporals.dayOfWeekNameShort(localDateTime)} = <span th:text="${#temporals.dayOfWeekNameShort(localDateTime)}"></span> </li>

  <li>${#temporals.hour(localDateTime)} = <span th:text="${#temporals.hour(localDateTime)}"></span></li>
  <li>${#temporals.minute(localDateTime)} = <span th:text="${#temporals.minute(localDateTime)}"></span></li>
  <li>${#temporals.second(localDateTime)} = <span th:text="${#temporals.second(localDateTime)}"></span></li>
  <li>${#temporals.nanosecond(localDateTime)} = <span th:text="${#temporals.nanosecond(localDateTime)}"></span></li>

</ul>
```

- 화면 출력

![Untitled](%E1%84%90%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%B7%E1%84%85%E1%85%B5%E1%84%91%E1%85%B3%20-%20%E1%84%80%E1%85%B5%E1%84%87%E1%85%A9%E1%86%AB%E1%84%80%E1%85%B5%E1%84%82%E1%85%B3%E1%86%BC%20d8a37ea6e93a42cc97b11acb19be30f7/Untitled%205.png)

---

## ➡️URL 링크

타임리프에서 URL을 생성할 때는 `@{…}` 문법을 사용하면 된다.

### 1️⃣단순 URL

- `@{/hello}` → `/hello`

### 2️⃣쿼리 파라미터

- `@{/hello(param1=${param1}, param2=${param2})}` → `/hello?param1=date1&param2=date2`
- `( )` 에 있는 부분은 쿼리 파라미터로 처리된다.

### 3️⃣ 경로 변수

- `@{/hello/{param1}/{param2}(param1=${param1}, param2=${param2})}` → `/hello/data1/data2`
- URL 경로상에 변수가 있으면 `( )` 부분은 경로 변수로 처리된다.

### 4️⃣ 경로 변수 + 쿼리 파라미터

- `@{/hello/{param1}(param1=${param1}, param2=${param2})}` → `/hello/data1?param2=data2`
- 경로 변수와 쿼리 파라미터를 함께 사용할 수 있다.

상대 경로, 절대 경로, 프로토콜 기준을 표현할 수 도 있다.

- `/hello` : 절대 경로
- `hello` : 상대 결로

```html
<h1>URL 링크</h1>
<ul>
    <li><a th:href="@{/hello}">basic</a></li>
    <li><a th:href="@{/hello(param1=${param1}, param2=${param2})}">hello query parma</a></li>
    <li><a th:href="@{/hello/{param1}(param1=${param1}, param2=${param2})}">path variable + query parameter</a></li>
</ul>
```

---

## 리터럴(Literals)

리터럴은 소스 코드상에 고정된 값을 말하는 용어이다.

### ✅타임리프 리터널

- 문자 : `hello`
- 숫자 : `10`
- 불린 :  `true` , `false`
- null : `null`

⚠️타임리프에서 문자 리터럴은 항상 `'` (작은 따옴표)로 감싸야 한다.

`<span th:text="'hello'">`

그런데 문자를 항상 `'` 로 감싸는 것은 귀찮고 실수가 많아 진다. 공백 없이 쭉 이어진다면 하나의 의미있는 토큰으로 인지해서 다음과 같이 작은 따옴표를 생략할 수 있다.

Role : `A-Z` , `a-z`, `0-9`, `[ ]` , `.` , `-`, `_`

`<span th:text=”hello”>`

### ⚠️오류

`<span th:text:"hello world!"></span>`

문자 리터럴은 항상 원칙상 `'` 로 감싸야 한다. 중간에 공백이 있어서 하나의 의미있는 토큰으로도 인식되지 않는다.

### ✂️수정

`<span th:text="'hello world!'"></span>`

이렇게 `'` 로 감싸면 정상 동작한다.

```html
<h1>리터럴 </h1>
<ul>
    <li>'hello' + ' world!' = <span th:text="'hello' + 'world!'"></span></li>
    <li>'hello world!' = <span th:text="'hello world!'"></span></li>
    <li>'hello ' + ${data} = <span th:text="'hello' + ${data}"></span></li>
    <li>리터럴 대체 |hello ${data}| = <span th:text="|hello ${data}|"></span></li>
</ul>
```

⚠️주의 - `<li>”hello world!” = <span th:text=”hello world!”></span></li>` → 결과: 예외 발생

- 화면 출력

![Untitled](%E1%84%90%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%B7%E1%84%85%E1%85%B5%E1%84%91%E1%85%B3%20-%20%E1%84%80%E1%85%B5%E1%84%87%E1%85%A9%E1%86%AB%E1%84%80%E1%85%B5%E1%84%82%E1%85%B3%E1%86%BC%20d8a37ea6e93a42cc97b11acb19be30f7/Untitled%206.png)

---

## ➡️연산

타임리프 연산은 자바와 크게 다르지 않다. HTML 안에서 사용하기 때문에 HTML 엔터티를 사용하는 부분만 주의하자.

```html
<h1>연산</h1>
<ul>
    <li>산술연산
        <ul>
            <li>10 + 2 = <span th:text="10 + 2"></span></li>
            <li>10 % 2 == 0 :  <span th:text="10 % 2 == 0"></span></li>
        </ul>
    </li>
    <li>비교 연산
        <ul>
            <li>1 > 10 결과 :  <span th:text="1 &gt; 10"></span></li>
            <li>1 gt 10  결과 :  <span th:text="1 gt 10"></span></li>
            <li>1 >= 10 결과 :  <span th:text="1 >= 10"></span> </li>
            <li>1 ge 10 결과 :  <span th:text="1 ge 10"></span></li>
            <li>1 == 10 결과 :  <span th:text="1 == 10"></span></li>
            <li>1 != 10 결과 : <span th:text="1 != 10"></span></li>
        </ul>
    </li>

    <li>조건식
        <ul>
            <li>(10 % 2 == 0) ? '짝수' : '홀수' = <span th:text="(10 % 2 == 0) ? '짝수':'홀수'"></span></li>
        </ul>
    </li>

    <li>Elvis 연산자
        <ul>
            <li>${data}? : '데이터가 없습니다.' = <span th:text="${data}?: '데이터가 없습니다.'"></span></li>
            <li>${nullDate}? : '데이터가 없습니다.' = <span th:text="${nullData}?: '데이터가 없습니다.'"></span></li>
        </ul>
    </li>

    <li>No-Operation
        <ul>
            <li>${data}?: _ = <span th:text="${data}?: _">데이터가 없습니다.</span></li>
            <li>${nullData}?: _=<span th:text="${nullData}?: _">데이터가 없습니다.</span></li>
        </ul>

    </li>

</ul>
```

- 화면 출력

![Untitled](%E1%84%90%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%B7%E1%84%85%E1%85%B5%E1%84%91%E1%85%B3%20-%20%E1%84%80%E1%85%B5%E1%84%87%E1%85%A9%E1%86%AB%E1%84%80%E1%85%B5%E1%84%82%E1%85%B3%E1%86%BC%20d8a37ea6e93a42cc97b11acb19be30f7/Untitled%207.png)

- 비교 연산 : HTML 엔티티를 사용해야 하는 부분을 주의하자.
  - `>` (gt), `<`(lt), `≥`(ge), `≤`(le), `!`(not), `==`(eq), `≠`(neq, ne)
- 조건식 : 자바의 조건식과 유사
- Elvis 연산자 : 조건식 편의 버전
- No-Operation : `_` 인 경우 마치 타임리프가 실행되지 않는 것 처럼 동작한다. 이것을 잘 사용하면 HTML의 내용 그대로 활용할 수 있다. 마지막 예를 보면 데이터가 없다. 부분이 그대로  출력된다.



---

<!-- outline-end -->
