---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
# lng_pair: id_autogeneratedsamplecontent_1
title: MyBatis의 Result Maps

# post specific
# if not specified, .name will be used from _data/owner.yml
#author: "Dante"
# multiple category is not supported
category: auto generated
# multiple tag entries are possible
tags: [Mybatis, SQLMapper]
# thumbnail image for post
img: ":mybatis.jpg"
# disable comments on this page
comments_disable: true

# publish date
date: 2023-05-15 22:55:00 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2023-05-15 22:55:00 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---
{%- comment -%} Please delete below and place your page content here {%- endcomment -%}

{%- include util/auto-content-generator.liquid -%}

<!-- outline-start -->

# Result Maps

## 👉resultMap이란?

resultMap에서 데이터를 가져올 때 작성되는 JDBC코드를 대부분 줄여주는 역할을 담당한다.

JOIN 매핑과 같은 복잡한 코드는 많은 양의 코드가 필요하다.

하지만 resultMap은 간단한 구문에서는 매핑이 필요하지 않고 복잡한 구문에서 관계를 서술하기 위해 필요하다.

---

### 👉DB의 칼럼명과 프로퍼티명이 같을 경우

- resultMap을 쓰지않은 예제

```sql
<select id="selectUsers" resultType="map">
  select id, username, hashedPassword
  from some_table
  where id = #{id}
</select>
```

- JavaBean 예제
  - property : id, username, hashedPassword

```java
package com.someapp.model;
public class User {
  private int id;
  private String username;
  private String hashedPassword;

  public int getId() {
    return id;
  }
  public void setId(int id) {
    this.id = id;
  }
  public String getUsername() {
    return username;
  }
  public void setUsername(String username) {
    this.username = username;
  }
  public String getHashedPassword() {
    return hashedPassword;
  }
  public void setHashedPassword(String hashedPassword) {
    this.hashedPassword = hashedPassword;
  }
}
```

- 위의 쿼리(select)에 칼럼명이 정확히 일치한다. → 따라서 자바빈은 HashMap과 마찬가지로 매우 쉽게 ResultMap에 매핑될 수 있다.

```sql
<select id="selectUsers" resultType="com.someapp.model.User">
  select id, username, hashedPassword
  from some_table
  where id = #{id}
</select>
```

---

## 👉DB의 칼럼명과 프로퍼티명이 같지 않을 경우

1. 칼럼명과 프로퍼티명이 다르다면 SQL구문에 별칭을 지정한다.

```sql
<select id="selectUsers" resultType="User">
  select
    user_id             as "id",
    user_name           as "userName",
    hashed_password     as "hashedPassword"
  from some_table
  where id = #{id}
</select>
```

1. resultMap을 사용하는 방법

```xml
<resultMap id="userResultMap" type="User">
  <id property="id" column="user_id" />
  <result property="username" column="user_name"/>
  <result property="password" column="hashed_password"/>
</resultMap>
```

- <resultMap id="userResultMap" type="User">
    - id : `userResultMap`
    - type : `User.java`

- `resultMap="userResultMap"` 으로 참조한다.

```sql
<select id="selectUsers" resultMap="userResultMap">
  select user_id, user_name, hashed_password
  from some_table
  where id = #{id}
</select>
```

---

## 👉복잡한 결과매핑

```sql
<!-- 매우 복잡한 구문 -->
<select id="selectBlogDetails" resultMap="detailedBlogResultMap">
  select
       B.id as blog_id,
       B.title as blog_title,
       B.author_id as blog_author_id,
       A.id as author_id,
       A.username as author_username,
       A.password as author_password,
       A.email as author_email,
       A.bio as author_bio,
       A.favourite_section as author_favourite_section,
       P.id as post_id,
       P.blog_id as post_blog_id,
       P.author_id as post_author_id,
       P.created_on as post_created_on,
       P.section as post_section,
       P.subject as post_subject,
       P.draft as draft,
       P.body as post_body,
       C.id as comment_id,
       C.post_id as comment_post_id,
       C.name as comment_name,
       C.comment as comment_text,
       T.id as tag_id,
       T.name as tag_name
  from Blog B
       left outer join Author A on B.author_id = A.id
       left outer join Post P on B.id = P.blog_id
       left outer join Comment C on P.id = C.post_id
       left outer join Post_Tag PT on PT.post_id = P.id
       left outer join Tag T on PT.tag_id = T.id
  where B.id = #{id}
</select>
```

- ResultMap 예제

```sql
<!-- Very Complex Result Map -->
<resultMap id="detailedBlogResultMap" type="Blog">
  <constructor>
    <idArg column="blog_id" javaType="int"/>
  </constructor>
  <result property="title" column="blog_title"/>
  <association property="author" javaType="Author">
    <id property="id" column="author_id"/>
    <result property="username" column="author_username"/>
    <result property="password" column="author_password"/>
    <result property="email" column="author_email"/>
    <result property="bio" column="author_bio"/>
    <result property="favouriteSection" column="author_favourite_section"/>
  </association>
  <collection property="posts" ofType="Post">
    <id property="id" column="post_id"/>
    <result property="subject" column="post_subject"/>
    <association property="author" javaType="Author"/>
    <collection property="comments" ofType="Comment">
      <id property="id" column="comment_id"/>
    </collection>
    <collection property="tags" ofType="Tag" >
      <id property="id" column="tag_id"/>
    </collection>
    <discriminator javaType="int" column="draft">
      <case value="1" resultType="DraftPost"/>
    </discriminator>
  </collection>
</resultMap>
```

- resultMap
  - `constructor` - 인스턴스화되는 클래스의 생성자에 결과를 삽입하기 위해 사용된다.
    - `idArg` - ID인자. ID와 같은 결과는 전반적으로 성능을 향상시킨다.
    - `arg` - 생성자에 삽입되는 일반적인 결과
  - `result` - 필드나 자바빈 프로퍼티에 삽입되는 일반적인 결과
  - `association` - 복잡합 타입의 연관관계. 많은 결과는 타입으로 나타난다.
    - 중첩된 결과 매핑 - resultMap 스스로의 연관관계
  - `collection` - 복잡한 타입의 컬렉션
    - 중첩된 결과 매핑 - resultMap 스스로의 연관관계
  - `discriminator` - 사용할 resultMap을 판단하기 위한 결과값을 사용
    - case - 몇 가지 값에 기초한 결과 매핑
      - 중첩한 결과 매핑 - 이 경우 또한 결과매핑 자체이고 이러한 동일한 엘리먼트를 많이 포함하거나 외부resultMap을 참조할 수 있다.


    | 속성 | 설명 |
    | --- | --- |
    | id | 결과매핑을 참조하기 위해 사용할 수 있는 값으로 네임스페이스에서 유일한 식별자 |
    | type | 패키지를 포함한 자바 클래스명이나 타입별칭 |
    | autoMapping | 이 설정을 사용하면 Mybatis는 결과매핑을 자동매핑으로 처리할지 말지를 처리한다. 이 속성은 autoMappingBehavior라는 전역설정을 덮는다.  디폴트는 unset이다. |

### 👉id, result

```xml
<id property="id" column="post_id"/>
<result property="subject" column="post_subject"/>
```

- id와 result 모두 한 개의 컬럼을 한개의 프로퍼티나 간단한 데이터 타입의 필드에 매핑한다.

- id와 result의 차이점
  - id값은 객체 인스턴스를 비교할 때 사용되는 구분자 프로퍼티로 처리되는 점이 차이점이다. 이 부분은 일반적으로 성능을 향상시키지만 특히 캐시와 내포된(nested)결과 매핑(조인 매핑)의 경우에 더 그렇다.

- id와 result 엘리먼트 속성

| 속성 | 설명 |
| --- | --- |
| property | 결과 컬럼에 매핑하기 위한 필드나 프로퍼티. 자바빈 프로퍼티가 해당 이름과 일치한다면 그 프로퍼티가 사용될 것이다. 반면에 MyBatis는 해당 이름이 필드를 찾을 것이다. 점(.) 표기를 사용하여 복잡한 매프로퍼티 검색을 사용할 수 있다.
예) “username”과 같이 간단하게 매핑될 수 있거나 “address.street.number”처럼 복잡하게 매핑될 수도 있다.   |
| column |  |
| javaType |  |
| jdbcType |  |
| typeHadnler |  |

---

## 🔗참조

[MyBatis – 마이바티스 3 | 매퍼 XML 파일](https://mybatis.org/mybatis-3/ko/sqlmap-xml.html#result-maps)

<!-- outline-end -->
