---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
# lng_pair: id_autogeneratedsamplecontent_1
title: Servlet으로 Session 사용하기 - Spring

# post specific
# if not specified, .name will be used from _data/owner.yml
#author: "Dante"
# multiple category is not supported
category: auto generated
# multiple tag entries are possible
tags: [Http, Session]
# thumbnail image for post
img: ":session.jpg"
# disable comments on this page
comments_disable: true

# publish date
date: 2023-04-15 20:30:00 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2023-04-15 20:30:00 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---
{%- comment -%} Please delete below and place your page content here {%- endcomment -%}

{%- include util/auto-content-generator.liquid -%}

<!-- outline-start -->

# 서블릿 HTTP 세션 2

## ⚓️서론

스프링을 이용하여 세션을 쉽게 관리해보자.

어노테이션을 통해서 쉽고 간단히 세션을 처리하는 방법을 배워보자.

---

### @SessionAttribute

스프링은 세션을 더 편리하게 사용할 수 있도록`@SessionAttribute` 을 지원한다.

- HomeController  - homeLoginV3Spring()

```java
/**
 * 스프링에서 지원하는 세션 방법 -> @SessionAttribute
 *
 * @param loginMember
 * @param mode
 * @return
 */
    @GetMapping("/")
    public String homeLoginV3Spring(@SessionAttribute(name = SessionConst.LOGIN_MEMBER, required = false) Member loginMember, Model model){

        //세션에 회원 데이터가 없으면 home
        if (loginMember == null) {
            return "home";
        }

        //세션이 유지되면 로그인으로 이동
        model.addAttribute("member", loginMember);
        return "loginHome";
    }
}
```

- 이미 로그인 된 사용자를 찾을 때는 다음과 같이 사용하면 된다.

```java
@SessionAttribute(name = "loginMember", required = false) Member loginMember
```

---

## TrackingModes

처음 로그인시 URL 끝에 `JSESSIONID`가 붙어 있다.

<img width="985" alt="Untitled" src="https://user-images.githubusercontent.com/56623911/232213270-72bfa974-2fb1-4b10-99f1-1b6c7eee8fc8.png">


이것은 웹 브라우저가 쿠키를 지원하지 않을 때 쿠키 대신 URL을 통해서 세션을 유지하는 방법이다.

이 방법을 사용하려면 URL에 이 값을 계속 포함해서 전달해야한다.

- 타임리프 같은 템플릿 엔진을 통해서 링크를 걸면 `jsessionid` 를 URL에 자동으로 포함해준다.
- 서버 입장에서 웹 브라우저가 쿠키를 지원하는지 하지 않는지 최초에는 판단하지 못하므로, 쿠키 값도 전달하고 URL에 `jsessionid` 도 함께 전달한다.

URL 전달 방식을 끄고 항상 쿠키를 통해서만 세션을 유지하고 싶으면 다음 옵션을 넣어주면 된다.

- application.properties

```java
server.servlet.session.tracking-modes=cookie
```

---

## 📎참고

- **[스프링 MVC 2편 - 백엔드 웹 개발 활용 기술](https://www.inflearn.com/course/스프링-mvc-2/dashboard)**


<!-- outline-end -->
