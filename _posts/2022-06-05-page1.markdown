---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
# lng_pair: id_autogeneratedsamplecontent_1
title: GithubPage 개설 과정 1

# post specific
# if not specified, .name will be used from _data/owner.yml
#author: "Dante"
# multiple category is not supported
category: auto generated
# multiple tag entries are possible
tags: [jekyll]
# thumbnail image for post
img: ":githubpage.jpg"
# disable comments on this page
comments_disable: true

# publish date
date: 2022-06-05 20:13:00 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2022-06-05 20:13:00 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---
{%- comment -%} Please delete below and place your page content here {%- endcomment -%}

{%- include util/auto-content-generator.liquid -%}

<!-- outline-start -->

# Github Page

github page를 통해서 기술블로그 만들어보기.

만들게 된 계기는 내가 만든 홈페이지를  내가 직접 코드로 짤 수 있다는 것 좋았다.  자유도 높다는 것에 있어서 장점이라고 생각한다.

“자유도가 많다는 것은 많은 것을 할 수 있지만, 수 많은 선택의 기로 앞에 놓이는 것과 같다.”

그렇지만 도전 해보고싶다.  아는 동생이 항상 하는 말이 생각난다. “해보자 해보자”

그래 .. 해보자.

참고 : PC 환경은 Mac OS M1 에서 작업이 이루어 집니다.

jekyll 사이트에서 기초 방법은 Doc을 통해서 나와있습니다.  doc을 참고 하셔도됩니다.

jekyll


![githubpage](https://user-images.githubusercontent.com/56623911/172046904-93989122-4f1b-4ea2-9e01-d1b4179e15e3.png)

## 1. 환경 설정

> #### ① Command Line Tool 설치

우선 mac환경에서  jekyll을 하기 위해서는 Command Line Tool을 설치하셔야합니다.

Command Line Tool이 필요한 이유는

Native 확장기능을 컴파일할 수 있게 해주는 명령행 도구를 설치해야 하므로, 터미널을 열어 다음 명령을 실행합니다

터미널 , iterm 등 에서 하시면 됩니다. 저는 iterm에서 진행하겠습니다.

![Untitled 1](https://user-images.githubusercontent.com/56623911/172046923-d8a1af0e-e7a2-424f-ad1c-1a5efa3b6d6a.png)

![Untitled 2](https://user-images.githubusercontent.com/56623911/172046935-ff9f6bdc-5f42-46d4-a22a-a4dc494f68c3.png)

> #### ② ruby 설치

※참고 : 루비 버젼은 2.4.0 이상으로 설치 하시길..바랍니다.

- homebrew 이용 설치

```
# Homebrew 설치
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

brew install ruby
```



- Homebrew 루비의 경로를 쉘 환경설정에 추가하기

```
echo 'export PATH="/usr/local/opt/ruby/bin:$PATH"' >> ~/.bash_profile
```

터미널 재시작하고 루비의 설정을 확인합니다.

![Untitled 3](https://user-images.githubusercontent.com/56623911/172046952-074c5f91-ebca-4f45-b5b7-3db1324c98d6.png)

> #### ③ rbenv (기호에 맞게 설치 하실분들만 하시길..)

rbenv는 여러 버전의 루비를 관리하는 것

장점 : 각각의 프로젝트마다 다른 버전의 루비를 실행해야 할 때  유용하게 쓰인다고 합니다.

```
# Homebrew 설치
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

# rbenv 와 ruby-build 설치
brew install rbenv

# 쉘 환경에 rbenv 가 연동되도록 설정
rbenv init

# 설치상태 검사
curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor | bash
```

rbenv 명령어 참고서

[https://github.com/rbenv/rbenv#command-reference](https://github.com/rbenv/rbenv#command-reference)

> #### ④ jekyll 설치

gem을 통해서 bundler & jekyll  설치

```
gem install --user-install bundler jekyll
```

이제 아래 내용을 쉘 환경에 추가하는데, `X.X`부분에는 설치된 루비 버전의 처음 두 숫자를 넣습니다.

```
echo 'export PATH="$HOME/.gem/ruby/X.X.0/bin:$PATH"' >> ~/.bash_profile
```

gem 경로가 홈 디렉토리를 가리키고 있는지 확인하려면 이 명령을 실행합니다

```
gem env
```

jekyll 설치 끄읏~~!

터미널에서 jekyll 확인해보기

<!-- outline-end -->
