---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
# lng_pair: id_autogeneratedsamplecontent_1
title: 테스트 주도 개발 9주차

# post specific
# if not specified, .name will be used from _data/owner.yml
#author: "Dante"
# multiple category is not supported
category: auto generated
# multiple tag entries are possible`
tags: [TDD]
# thumbnail image for post
img: ":testDrivenDevelopment.jpg"
# disable comments on this page
comments_disable: true

# publish date
date: 2022-12-16 23:40:00 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2022-12-16 23:40:00 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---
{%- comment -%} Please delete below and place your page content here {%- endcomment -%}

{%- include util/auto-content-generator.liquid -%}

<!-- outline-start -->

# 스터디 9주차(22.12.11 ~ 22.12.16)

# 31장 리팩토링

---

## 차이점 일치시키기

작은 단계와 명확한 피드백을 이용해서 피해가고자 하는 일이 바로, 불확실한 믿음에 의지하여 단계를 크게 건너뛰는 리팩토링이다.  이런 크게 도약하는 리팩툉을 완전히 피할 수는 없겠지만, 발생 빈도를 줄일 수는 있다.

이 리팩토링은 모든 규모의 작업에서 발생한다.

- 두 반복문의 구조가 비슷하다. 이 둘을 동일하게 만들고 나서 하나로 합친다.
- 조건문에 의해 나눠지는 두 분기의 코드가 비슷하다. 이 둘을 동일하게 만들고 나서 조건문을 제거한다.
- 두 클래스가 비슷하다. 이 둘을 동일하게 만들고 나서 하나를 제거한다.

간혹 차이점 일치시키기를 거꾸로 수행해야 하는 경우도 있음.

변경 마지막 단계에 사소한 것만 처리하게 하려면 어떤 모양새가 되어야할까 생각한 다음 거꾸로 거슬로 온다는 것이다.

Ex) 여러 개의 하위 클래스를 제거하길 원할 경우.

→ 하위 클래스의 내용이 비어 있다면 마지막 작업은 간단할 것이다. 그러면 단지 하위 클래스에 대한 참조를 상위 클래스로 바꿔주기만 하면 된다. 이 작업은 시스템의 행위를 변경하지 않을 것이다.

→ 하위 클래스의 내용이 비어 있으려면 메소드의 내용이 상위 클래스의 메소드 내용과 동일하면 된다. 하위 클래스의 내용을 하나씩 비우고 모두 비우면 하위 클래스에 대한 참조를 상위 클래스로 바꾼다.

---

## 변리 격리하기

객체나 메소드의 일부만 바꾸려면 어떻게 해야할까?

- 우선, 바꿔야 할 부분을 격리한다.

- 격리하고 나서 바꾸는 작업을 하면 작업을 되돌리기도 매우 수월해진다.

- 변화를 격리하기 위해 사용할 수 있는 방법들
  - 메서드 추출하기
  - 객체 추출하기
  - 메서드 객체(Method Object)

---

## 데이터 이주시키기

표현 양식을 변경하려면 어떻게 해야 할까? → 일시적으로 데이터를 중복시킨다.

내부에서 외부로 변환이란? 내부의 표현 양식을 변경한 후 외부 인터페이스를 변화시키는 방법이다.

### 방법

- 내부에서 외부로 변환시키는 방법
  - 새로운 포맷의 인스턴스 변수를 추가한다.
  - 기존 포맷의 인스턴스 변수를 세팅하는 모든 부분에서 새로운 인스턴스 변수도 세팅하게 만든다.
  - 기존 변수를 사용하는 모든 곳에서 새 변수를 사용하게 만든다.
  - 기존 포맷을 제거한다.
  - 새 포맷에 맞게 외부 인터페이스를 변경한다.

- 때로는 API를 먼저 변화시키기를 원할 때는 ?
  - 새 포맷으로 인자를 하나 추가한다.
  - 새 포맷 인자에서 이전 포맷의 내부적 표현양식으로 번역한다.
  - 이전 포맷 인자를 삭제한다.
  - 이전 포맷을 사용하는 것들을 새 포맷으로 바꾼다.
  - 이전 포맷을 지운다.

### 이유

- ‘하나에서 여럿으로’는 항상 데이터 이주시키기 문제를 만들어낸다.

TestSuite 예제를 갖고 ‘하나에서 여럿으로’를 적용하는 상황을 가정해보자.

```python
def testSuite(self) :
    suite = TestSuite()
    suite.add(WasRun("testMethod"))
    suite.run(self.result)
    assert("1 run, 0 failed" == self.result.summary())
```

‘하나에서 여럿으로’ 해당하는 부분

```python
class TestSuite:
    def add(self, test):
        self.test = test
    def run(self, result)
        sef.test.run(result)
```

데이터를 중복시킬 차례 → 테스트 컬렉션을 초기화한다.

```python
#TestSuite
def __init__(self):
    self.tests = []
```

test 변수를 설정하는 모든 부분에서 컬렉션도 설정하게 만든다.

```python
#TestSuite
def add(self, test)
    self.test = test
    self.tests.append(test)
```

이제 단일 테스트 대신 테스트 목록을 사용할 수 있게 됐다. → 현재 테스트 케이스의 입장에서 볼 때 이것은 리팩토링이다.? 이유는 현재 컬렉션 안에는 하나의 요소만 들어갈 수 있기 때문이다.

```python
#TestSuite
def run(self, result):
    for test in self.tests:
        test.run(result)
```

이제 쓰이지 않는 인스턴스 변수인 test를 제거한다.

```python
#TestSuite
def add(self, test):
    self.tests.append(test)
```

자바의 Vector/Enumerator에서 Collection/Iterator로 옮기는 작업 같이, 서로 다른 프로토콜을 갖는 동등한 포맷의 데이터에 대해서도 위와 같은 단계적인 데이터 이주시키기를 적용할 수 있다.

---

## 메서드 추출하기

길고 복잡한 메소드를 읽기 쉽게 만들려면 어떻게 할까?  → 긴 메서드의 일부분을 별도의 메소드로 분리해내고 이를 호출하게 한다.

### 방법

- 메소드 추출하기 리팩토링을 수행해주는 기능을 사용해라!

- 수동으로 따라해볼 일은 별로 없을 것이라고 글쓴이는 말한다. 그런 기능이 탑재되지않은 ide라면 수동으로 해야하기 떄문에 수동으로 하는 것을 배워보자.

1. 기존의 메소드에서 별도의 메소드로 분리할 수 있을 만한 부분을 찾아낸다. 반복문 내부의 코드나 반복문 전체, 혹은 조건문의 가지들이 일반적인 후보.
2. 추출할 영역의 외부에서 선언된 임시 변수에 대해 할당하는 문장이 없는지 확인한다.
3. 추출할 코드를 복사해서 새 코드에 붙인다.
4. 원래 메소드에 있던 각각의 임시 변수와 매개 변수 중 새 메서드에서도 쓰이는 게 있으면, 이들을 새 메서드의 매개 변수로 추가한다.
5. 기존의 메서드에서 새 메서드를 호출한다.

### 이유

- 글쓴이는 복잡한 코드를 이해하고자 할 때 메소드 추출하기를 사용한다고 한다.  → 코드를 더 잘 이해할 수 있음

<aside>
💡 “어떤 부분이 어떤 일을 수행하는지 그것을 어떤 네이밍을 할지 고민한다고 한다.”

</aside>

- 메소드 추출하기는 서로 비슷한 내용이 있는 두 메소드에서 중복을 제거하기 위해 사용하기도 한다.

### 주의 사항

- 메소드를 작은 조각으로 나누는 것은 때때로 너무 정도가 지나칠 수 있다.

---

## 메소드 인라인

메소드 인라인은 코드가 너무 꼬여있거나 산재한 제어 흐름을 단순화할 수 있는 방법이다.

### 방법

1. 메서드를 복사한다.
2. 메서드 호출하는 부분을 지우고 복사한 코드를 붙인다.
3. 모든 형식(formal) 매개 변수를 실제(actual) 매개 변수로 변경한다. 예를 들어 만약 `reader.getNext()` 같은 매개 변수를 전달했다면, 이를 지역 변수에 할당해주어야 할 것. → 표현 식은 reader의 내부 상태를 바꾸기 때문에)

### 이유

```java
public void testSimpleAddition(){
    Money five = Money.dollar(5);
    Expression sum = five.plus(five);
    Bank bank = new Bank();
    Money reduced = bank.reduce(sum, "USD");
    assertEquals(Money.dollar(10), reduced);
}
```

위 코드는 복잡하다.  Money가 스스로를 축약하게 만들면 되는거 아닌가?

Bank.reduce()의 구현을 합쳐놓고 코드가 어떻게 바뀌는지 보면 알 수 있다.

`Money reduced = bank.reduce(sum, "USD")` -> `Money reduced = sum.reduce(sum, "USD");`

```java
public void testSimpleAddition(){
    Money five = Money.dollar(5);
    Expression sum = five.plus(five);
    Bank bank = new Bank();
    Money reduced = sum.reduce(sum, "USD");
    assertEquals(Money.dollar(10), reduced);
}
```

위 코드가 첫 번째 코드보다 좋아 보일 수도 있고 아닐 수도 있음. 여기서 중요한건 제어 흐름을 바꿔가며 메서드를 인라인 할 수 있다는 점이다.

### 주의 사항

리팩토링 중 자신의 꾀에 빠져버리는 수가 있다. 그럴 때면, 메서드 합치기는 코드를 되돌릴 수 있다.

무슨 일이 벌어지는지 도무지 모를 때 → 여러 추상화 계층을 인라인시켜 놓고 뭐가 어떻게 돌아가는지 제대로 이해한 다음, 예상이 아닌 실제적인 필요성에 기반하여 다시 추상화를 수행한다..

---

## 인터페이스 추출하기

자바 오퍼레이션에 대한 두 번째 구현을 추가하려면 어떻게 해야 할까? → 공통되는 오퍼레이션을 담고 있는 인터페이스를 만들면 된다.

### 방법

1. 인터페이스를 선언한다. 때론 새로 추가될 인터페이스의 이름으로 기존 클래스의 이름을 사용해야 하는 경우가 있는데, 그런 경우라면 인터페이스를 추가하기 전에 기존 클래스의 이름을 변경해주어야 한다.
2. 기존 클래스가 인터페이스를 구현하도록 만든다.
3. 필요한 메소드를 인터페이스를 추가한다. 필요하다면 클래스에 존재하는 메소드들의 가시성을 높여준다.
4. 가능한 모든 곳의 타입 선언부에서 클래스 이름 대신 인터페이스 이름을 사용하게 바꾼다.

### 이유

인터페이스를 추출할 필요가 있을 경우, 때때로 사실 첫 번째 구현에서 두 번째 구현으로 이동하고 있는 것이다.

사각형(Rectangle)클래스가 있고 타원(Oval)을 추가하고 싶으면 모양(Shape)이라는 인터페이스를 만든다.

인터페이스를 추출할 필요가 있을 경우 → 크래시 테스트 더미(Crash Test Dummy)나 기타 모의 객체(Mock Object)를 도입하기도 한다.

이럴 경우 이름 짓기가 힘들다.  왜냐하면 진짜 구현 사례는 단 한가지 밖에 존재하지 않기 때문이다.

---

## 메소드 옮기기

메소드를 원래 있어야 할 장소로 옮기려면 어떻게 해야 할까? 어울리는 클래스에 메서드를 추가해주고, 그것을 호출하게 하라.

### 방법

1. 메소드를 복사한다.
2. 원하는 클래스에 붙이고 이름을 적절히 지어준 다음 컴파일한다.
3. 원래 객체가 메서드 내부에서 참조된다면, 원래 객체를 새 메서드의 매개 변수로 추가한다. 원래 객체의 필드들이 참조되고 있다면 그것들도 매개 변수로 추가한다. 만약 원래 객체의 필드들이 갱신된다면 포기해야 한다.
4. 원래 메서드의 본체를 지우고, 그곳에 새 메서드를 호출하는 코드를 넣는다.

### 이유

보증이 안 되는 예상을 발견하는 데에 탁월한 방법이기 때문이다. 면적을 계산하는 것은 Shape의 책임이다.

```java
...
int width = bounds.right() - bounds.left();
int height = bounds.bottom() - bounds.top();
int area = width * height;
...
```

한 메서드에서 다른 객체에 하나 이상의 메시지를 보내는 것을 보면 → 의심해보자.

```java
public int area() {
    int width = this.right() - this.left();
    int height = this.bottom() - this.top();
    return width * height;
}
```


<!-- outline-end -->
