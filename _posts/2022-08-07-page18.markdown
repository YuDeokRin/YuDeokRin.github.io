---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
# lng_pair: id_autogeneratedsamplecontent_1
title: The Java8(배열 병렬 정렬)

# post specific
# if not specified, .name will be used from _data/owner.yml
#author: "Dante"
# multiple category is not supported
category: auto generated
# multiple tag entries are possible`
tags: [Java, Java 8]
# thumbnail image for post
img: ":java8.jpg"
# disable comments on this page
comments_disable: true

# publish date
date: 2022-08-07 23:00:00 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2022-08-07 23:00:00 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---
{%- comment -%} Please delete below and place your page content here {%- endcomment -%}

{%- include util/auto-content-generator.liquid -%}

<!-- outline-start -->
# 배열 병렬 정렬

자바 8 이전에 사용했던 배열 정렬 클래스

알고리즘 문제를 풀 때 정렬하는 문제는 빈번하게 출제된다.

배열 정렬 문제를 풀 때는 항상 `Arrays.sort()`를 이용했다.

너무 간단했기 때문에 사용했다. 하지만 `Arrays.sort()`가 어떤식으로 동작하는지 모르는데 쓰는 것이 내 마음에 걸렸다.

그래서 `Arrays.sort()` 내부를 보았다.



`Arrays.sort()`의 내부

![Untitled](https://user-images.githubusercontent.com/56623911/183294364-d912fe7b-58c5-4f67-ad05-9b872c2d4e6c.png)

Implementation note에 제작자, 알고리즘 설명, 시간복잡도 등 알려 준다.

- **제작자** : Vladimir Yaroslavskiy, Jon Bentley,  Joshua Bloch
- **알고리즘** : Dual-Pivot Quicksort (두 개의 피폿으로 퀵정렬)
- **간략한 설명** : 이 알고리즘은 다른 퀵소트가 2차 성능으로 저하되도록 하는 많은 데이터 세트에 대해 O(n log(n)) 성능을 제공하며 일반적으로 기존(1피벗) 퀵소트 구현보다 빠릅니다.
- **시간복잡도** : O(n log(n))

Dual-Pivot Quicksort  예시 간략히 이렇게 된다고 한다.

![Untitled 1](https://user-images.githubusercontent.com/56623911/183294368-12c936d2-ed7d-436d-8760-568a99f5dc6d.png)

-----

그렇다면….

자바8 에서는 어떤 배열 정렬이 나왔을까 ??

`Arrays.parallelSort()` 라는 것이 나왔다!!

이것은

- Fork/Join 프레임워크를 사용해서 배열을 병렬로 정렬하는 기능을 제공한다고 한다.

병렬 정렬 알고리즘

- 배열을 둘로 계속 쪼갠다.
- 합치면서 정렬한다.



`Arrays.parallelSort()` 의 내부

![Untitled 2](https://user-images.githubusercontent.com/56623911/183294370-623fa456-17ea-4459-87d4-99bb1ee64bb9.png)

이런식의 알고리즘이라고한다.

![Untitled 3](https://user-images.githubusercontent.com/56623911/183294371-7d0c92e6-c6d7-4b0b-99ec-613031e918bb.png)


### Arrays.sort() vs Arrays.parallelSort()

nanoTime()을 이용해서

```java
public class배열_병렬_정렬{

publicstaticvoidmain(String[]args) {
intsize = 5000;
int[] numbers =new int[size];

Randomrandom =newRandom();
IntStream.range(0, size).forEach(i-> numbers[i] = random.nextInt());

longstart =System.nanoTime();
Arrays.sort(numbers);

System.out.println("serial sorting took :" + (System.nanoTime() - start));

IntStream.range(0,size).forEach(i->numbers[i] = random.nextInt());
        start =System.nanoTime();
Arrays.parallelSort(numbers);
System.out.println("parallel sorting took :" + (System.nanoTime() - start));

    }
}
```

배열의 size가 5000

> - **결과**
>
>
> serial sorting took :2446833 <br>
> parallel sorting took :1830958 <br>
>

배열의 size가 100

> -**결과**
>
>
> serial sorting took :197583 <br>
> parallel sorting took :49167 <br>
>

성능 차이가 좀 많이난다.


### 참고 : [백기선 - The Java8 ](https://www.inflearn.com/course/the-java-java8/dashboard)
### 참고 : [Java 8 | Arrays parallelSort() method with Examples](https://www.geeksforgeeks.org/java-8-arrays-parallelsort-method-with-examples/?ref=gcse)
### 참고 : [Dual pivot Quicksort](https://www.geeksforgeeks.org/dual-pivot-quicksort/?ref=gcse)

<!-- outline-end -->
