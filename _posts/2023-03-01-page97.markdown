---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
# lng_pair: id_autogeneratedsamplecontent_1
title: Spring JDBC

# post specific
# if not specified, .name will be used from _data/owner.yml
#author: "Dante"
# multiple category is not supported
category: auto generated
# multiple tag entries are possible
tags: [Effective_Java, Java]
# thumbnail image for post
img: ":spring.jpg"
# disable comments on this page
comments_disable: true

# publish date
date: 2023-03-01 23:25:00 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2023-03-01 23:25:00 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---
{%- comment -%} Please delete below and place your page content here {%- endcomment -%}

{%- include util/auto-content-generator.liquid -%}

<!-- outline-start -->

# 스프링 JDBC

## ⚓️서론

JDBC는 오랫동안 DB연동 기술로 쓰였다.

JDBC는 DB연동 프로그램을 개발하게 되면 데이터베이스에 비종속적인 DB연동 로직을 구현할 수 있게 도와준다.

하지만 단점이라면 너무 많은 코드를 작성해야한다는 단점이 있다. 따라서 나중에 더 발전된 것들이 나오게된다.

나중에 나온 것들

- SQLMapper(MyBatis, Spring JDBC), ORM(JPA, Spring Data JDBC, Spring Data JPA)

---

## ✅JDBC

예시를 통해서 알아보자.

DAO가 있다면 항상 아래것을 넣어주고 닫아줘야한다. 너무너무 코드가 길어진다.

```java
Class.forName("org.h2.Driver");
            String url = "jdbc:h2:tcp://localhost/~/test";
            conn = DriverManager.getConnection(url, "sa", "");
```

- 커넥션 해제 코드

```java
if(rs != null){
            try{
                if(!rs.isClosed()){
                    rs.close();
                }
            }catch(Exception e){
                e.printStackTrace();
            }finally{
                rs = null;
            }
        }

        if (stmt != null) {
            try{
                if(!stmt.isClosed()){
                    stmt.close();
                }
            }catch(Exception e){
                e.printStackTrace();
            } finally{
                stmt = null;
            }
        }

        if(conn != null){
            try{
                if(!conn.isClosed()){
                    conn.close();
                }
            }catch(Exception e){
                e.printStackTrace();
            }finally{
                conn = null;
            }
        }
```

그 해결책으로는 JDBCUtil 클래스를 만들어서 커넥션연결과 해제로직을 만들어서 사용할 수도 있다.

```java
public class JDBCUtil {
    public static Connection getConnection(){
        try{
            Class.forName("org.h2.Driver"); // 드라이버 작동
            return DriverManager.getConnection("jdbc:h2:tcp://localhost/~/test", "sa", "");
        }catch(Exception e){
            e.printStackTrace();
        }
        return null;
    }

    public static void close(PreparedStatement stmt, Connection conn) {

        if(stmt != null) {
            try{
                if(!stmt.isClosed()){
                    stmt.close();
                }
            }catch(Exception e){
                e.printStackTrace();
            } finally{
                stmt = null;
            }
        }

        if (conn != null) {
            try{
                if(!conn.isClosed()){
                    conn.close();
                }
            }catch(Exception e){
                e.printStackTrace();
            }finally{
                conn = null;
            }
        }
    }

    public static void close(ResultSet rs, PreparedStatement stmt, Connection conn){
        if(rs != null){
            try{
                if(!rs.isClosed()){
                    rs.close();
                }
            }catch(Exception e){
                e.printStackTrace();
            }finally{
                rs = null;
            }
        }

        if (stmt != null) {
            try{
                if(!stmt.isClosed()){
                    stmt.close();
                }
            }catch(Exception e){
                e.printStackTrace();
            } finally{
                stmt = null;
            }
        }

        if(conn != null){
            try{
                if(!conn.isClosed()){
                    conn.close();
                }
            }catch(Exception e){
                e.printStackTrace();
            }finally{
                conn = null;
            }
        }
    }
}
```

이런 환경에서 새로운 기능의 메소드를 개발하려면, 결국 기조 메소드를 복사하여 SQL수정하는 방법뿐이다..

그런데 만약 DB연동에 필요한 자바 코드를 처리해주고 개발자는 실행되는 SQL 구문만 관리한다면 개발과 유지보수는 훨씬 편해질 것이다.

스프링은 JDBC 기반의 DB연동 프로그램을 쉽게 개발할 수 있도록 JdbcTemplate 클래스를 제공한다.

---

## ✅JdbcTemplate 클래스

JdbcTemplate는 디자인 패턴 중 템플릿 메소드 패턴이 적용된 대표적인 클래스 예시이다.

템플릿 메소드 패턴을 사용하면 반복해서 사용되는 알고리즘을 템플릿 메소드로 캡슐화할 수 있어서 JDBC처럼 코딩 순서가 정해진 기술에서는 유용하게 사용할 수 있다.

따라서 위에서 자바코르를 처리해주는 역할을 JdbcTemplate가 역할을 해주고 개발자는 SQL 구문과 설정값만 관리해주면된다.



<!-- outline-end -->
