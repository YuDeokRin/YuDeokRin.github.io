---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
# lng_pair: id_autogeneratedsamplecontent_1
title: Java 8 - 날짜 관련 클래스

# post specific
# if not specified, .name will be used from _data/owner.yml
#author: "Dante"
# multiple category is not supported
category: auto generated
# multiple tag entries are possible`
tags: [Java]
# thumbnail image for post
img: ":java.jpg"
# disable comments on this page
comments_disable: true

# publish date
date: 2023-06-01 23:15:00 +0900

# seo
# if not specified, date will be used.
#meta_modify_date: 2023-06-01 23:15:00 +0900
# check the meta_common_description in _data/lang/[language].yml
#meta_description: ""

# optional
# if you enabled image_viewer_posts you don't need to enable this. This is only if image_viewer_posts = false
#image_viewer_on: true
# if you enabled image_lazy_loader_posts you don't need to enable this. This is only if image_lazy_loader_posts = false
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---
{%- comment -%} Please delete below and place your page content here {%- endcomment -%}

{%- include util/auto-content-generator.liquid -%}

<!-- outline-start -->

# 날짜 관련 클래스들

## ⚓️서론

회사에서 Java8에서 도입된 날짜 관련 클래스들을 써야했던 것이 있었다.

예를 들어..

앱 푸시 같은 것들을 동의할 경우, 쿠폰을 주는데 앱 푸시 상태를 90일 동안 수신을 무조건 유지해야한다. 그렇기 때문에 그 90일을 날짜 관련된 클래스들을 써서 도입하려고했다.

잘 몰랐던 나는 빠르게 훑어보면서 적용해야만 했다….

그때 들었던 생각은 이것을 잊어먹지 않기 위해서 정리해야겠다고 다짐했다.

정리해보자..

---

## ✅날짜 관련 클래스들

Java 8 이전에는 Date, SimpleDateFormatter, TimeZone, Calender 등등 을 사용해서 날짜들을 처리했다고 한다.

Java 8 이전에 사용했던 것들은 문제가 많았다.

1. 쓰레드 안전하지 못하다.
2. 불변 객체가 아니여서 지속적으로 값이 변경이 가능했다.
3. 하나의 클래스에 생성해 놓은 이들 클래스는 여러 쓰레드에서 접근할 때 이상한 값들을 리턴할 수도 있었다.

참고로 기존의 연도는 1900년부터 시작하도록 되어 있고, 달은 1부터, 일은 0부터 시작한다. 따라서 1900년 1월 1일은 1900, 1, 0을 매개 변수로 넘겨줘야만 했다.

### ➡️Java 8 이전과 이후의 차이점

| 내용 | 버젼 | 패키지 | 설명 |
| --- | --- | --- | --- |
| 값 유지  | Java 8 이전 | java.util.Date, java.util.Calendar | Date 클래스는 날짜 계산을 할 수 없다. Calendar 클래스는 불변 객체가 아니므로 연산시 객체 자체가 변경되었다. |
|  | Java 8  | java.time.ZonedDateTime, java.time.LocalDate 등  | ZonedDateTime과 LocalDate 등은 불변 객체이다. 모든 클래스가 연산용의 메소드를 갖고 있으며, 연산시 새로운 불변 객체를 돌려준다. 또한 쓰레드에 안전하다. |
| 변경 | Java 8 이전 | java.text.SimpleDateFomat | SimpleDateFomat는 쓰레드 안전하지도 않고 느리다. |
|  | Java 8  | java.time.format.DateTimeFormatter | DateTimeFormatter는 쓰레드가 안전하고 빠르다. |
| 시간대 | Java 8 이전 | java.util.TimeZone | “Asia/Seoul”이나 “+09 : 00” 같은 정보를 가진다. |
|  | Java 8  | java.time.ZoneId, java.time.ZoneOffset | ZoneId는 “Asia/Seoul”라는 정보를 갖고 있고, ZoneOffset는 “+09 : 00”라는 정보를 가지고 있다. |
| 속성 관련  | 예전 버전 | java.util.Calendar | Calendar.YEAR, Calendar.MONTH, Calendar.DATE(또는 Calendar.DAY_OF_MONTH) 등 이들은 정수(int)이다. |
|  | Java 8 | java.time.temporal.ChonoField(java.time.temporal.TemporalField) | ChonoField.YEAR, ChonoField.MONTH_OF_YEAR, ChonoField.DAY_OF_MONTH 등이 enum 타입이다. |
|  |  | java.time.temporal.ChonoUnit | ChonoUnit.YEAR(연수), ChonoUnit.MONTHS(개월), ChonoUnit.DAYS(일) 등이 enum타입이다. |

자료 출처 : [http://www.ne.jp/asahi/hishidama/home/tech/java/datetime.html](http://www.ne.jp/asahi/hishidama/home/tech/java/datetime.html)

### ➡️시간을 나타내는 클래스

`Local`, `Offset`, `Zoned` 3가지 종류가 존재한다.

- Local : 시간대가 없는 시간. 예를 들어 "1시”는 어느 지역의 1시인지 구분되지 않는다.
- Offset : UTC(그리니치 시간대)와의 오프셋(차이)을 가지는 시간 한국은 “+09:00”
- Zoned : 시간대(”한국 시간과 같은 정보)를 갖는 시간, 한국은 경우는 “Asia/Seoul”
-


<!-- outline-end -->
